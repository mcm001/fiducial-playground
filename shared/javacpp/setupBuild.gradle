apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply plugin: 'edu.wpi.first.NativeUtils'

apply from: "${rootDir}/shared/config.gradle"
apply from: "${rootDir}/shared/javacommon.gradle"

wpilibTools.deps.wpilibVersion = wpi.versions.wpilibVersion.get()

def nativeConfigName = 'wpilibNatives'
def nativeConfig = configurations.create(nativeConfigName)

def nativeTasks = wpilibTools.createExtractionTasks {
    configurationName = nativeConfigName
}

nativeTasks.addToSourceSetResources(sourceSets.main)

nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpimath")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpinet")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("wpiutil")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("ntcore")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("cscore")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("apriltag")
nativeConfig.dependencies.add wpilibTools.deps.wpilib("hal")
nativeConfig.dependencies.add wpilibTools.deps.wpilibOpenCv("frc" + wpi.frcYear.get(), wpi.versions.opencvVersion.get())

// Windows specific functionality to export all symbols from a binary automatically
nativeUtils {
    exportsConfigs {
        "${nativeName}" {}
    }
}

model {
    components {
        "${nativeName}"(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }
                        include "**/*.h"
                    }
                }
            }

            if(project.hasProperty('includePhotonTargeting')) {
                binaries.all {
                    lib project: ':photon-targeting', library: 'photontargeting', linkage: 'shared'
                }
            }

            main_native_libs.each { name ->
                nativeUtils.useRequiredLibrary(it, name)
            }

            appendDebugPathToBinaries(binaries)
        }
        // By default, a development executable will be generated. This is to help the case of
        // testing specific functionality of the library.
        "${nativeName}Dev"(NativeExecutableSpec) {
            targetBuildTypes 'debug'
            sources {
                cpp {
                    source {
                        srcDirs 'src/dev/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'src/main/native/include'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }
                    }
                }
            }
            binaries.all {
                lib library: nativeName, linkage: 'shared'
                it.tasks.withType(CppCompile) {
                    // it.dependsOn generateProto
                }
                if (project.hasProperty('exeSplitSetup')) {
                    exeSplitSetup(it)
                }
            }

            dev_native_libs.each { name ->
                nativeUtils.useRequiredLibrary(it, name)
            }

            appendDebugPathToBinaries(binaries)
        }
        "${nativeName}JNI"(JniNativeLibrarySpec) {
            baseName = nativeName + 'jni'

            enableCheckTask project.hasProperty('doJniCheck')
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.linuxarm32)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.linuxarm64)

            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/jni'
                        if (project.hasProperty('generatedSources')) {
                            srcDir generatedSources
                        }
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDir 'src/main/native/jni_inc'
                        if (project.hasProperty('generatedHeaders')) {
                            srcDir generatedHeaders
                        }
                        include '**/*.h'
                    }
                }
            }

            binaries.all {
                if (it instanceof StaticLibraryBinarySpec) {
                    it.buildable = false
                    return
                }
                lib library: "${nativeName}", linkage: 'static'
                if (project.hasProperty('jniSplitSetup')) {
                    jniSplitSetup(it)
                }
            }

            if(project.hasProperty("jni_native_libs")) jni_native_libs.each { name ->
                nativeUtils.useRequiredLibrary(it, name)
            }

            appendDebugPathToBinaries(binaries)
        }
    }
    testSuites {
        "${nativeName}Test"(GoogleTestTestSuiteSpec) {
            for(NativeComponentSpec c : $.components) {
                if (c.name == nativeName) {
                    testing c
                    break
                }
            }
            sources {
                cpp {
                    source {
                        srcDirs 'src/test/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/test/native/include', 'src/main/native/cpp'
                    }
                }
            }

            if(project.hasProperty('includePhotonTargeting')) {
                binaries.all {
                    lib project: ':photon-targeting', library: 'photontargeting', linkage: 'shared'
                }
            }

            test_native_libs.each { name ->
                nativeUtils.useRequiredLibrary(it, name)
            }
        }
    }
}

apply from: "${rootDir}/shared/javacpp/publish.gradle"
